Large repeating code fragments >> extract repeating code in separate method
Large methods >> split them logically
Large loop body or deep nesting >> extract method
Class or method has weak cohesion >> split into several classes / methods
Single change carry out changes in several classes >> classes have tight coupling >> consider redesign
Related data are always used together but are not part of a single class >> group them in a class
A method has too many parameters >> create a class to groups parameters together
A method calls more methods from another class than from its own class >> move it
Two classes are tightly coupled >> merge them or redesign them to separate their responsibilities
Public non-constant fields >> make them private and define accessing properties
Magic numbers in the code >> consider extracting constants
Bad named class / method / variable >> rename it
Complex boolean condition >> split it to several expressions or method calls
Complex expression >> split it into few simple parts
A set of constants is used as enumeration >> convert it to enumeration
Method logic is too complex and is hard to understand >> extract several more simple methods or even create a new class
Unused classes, methods, parameters, variables >> remove them
Large data is passed by value without a good reason >> pass it by reference
Few classes share repeating functionality >> extract base class and reuse the common code
Different classes need to be instantiated depending on configuration setting >> use factory
Code is not well formatted >> reformat it
Too many classes in a single namespace >> split classes logically into more namespaces
Unused using definitions >> remove them
Non-descriptive error messages >> improve them
Absence of defensive programming >> add it
